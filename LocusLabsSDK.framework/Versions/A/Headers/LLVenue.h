//
//  LLVenue.h
//  LocusLabsSDK
//
//  Created by Samuel Ziegler on 6/12/14.
//  Copyright (c) 2014 LocusLabs. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "LLConfiguration.h"
#import "LLBeacon.h"
#import "LLLocation.h"

@class LLVenue;
@compatibility_alias LLAirport LLVenue;

@class LLBuilding;
@class LLFloor;
@class LLSearch;
@class LLPOIDatabase;
@class LLPosition;
@class LLNavigationPath;

/**
 *  Defines the delegate methods of a Vemue object.  Several methods within the Venue object may require asynchronous calls to the LocusLabs
 *  servers.  These delegate methods are called when those asynchronous calls return.
 */

@protocol LLVenueDelegate <NSObject>

@optional

/**
 *  Returns the list of buildings generated by a call to LLVenue listBuildings
 *
 *  @param venue     the object which generated this list
 *  @param buildings an array of LLBuildingInfo objects
 */
- (void)venue:(LLVenue *)venue buildingList:(NSArray *)buildings;

/**
 *  A new instance of a LLBuilding object as loaded via the LLVenue loadBuilding: method.
 *
 *  @param venue    the object which loaded the building
 *  @param building the newly created LLBuilding object
 */
- (void)venue:(LLVenue *)venue buildingLoaded:(LLBuilding *)building;

/**
 *  The result of a navigation call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param navigationPath	the resulting navigation path
 *  @param startPosition 	the start position of the navigation
 *  @param destinations		the array of LLPosition destinations
 */
- (void)venue:(LLVenue *)venue navigationPath:(LLNavigationPath *)navigationPath from:(LLPosition *)startPosition toDestinations:(NSArray *)destinations;

/**
 *  The result of a update navigation path call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param navigationPath	the resulting navigation path
 *  @param startPosition 	the start position of the navigation
 *  @param destinations		the array of LLPosition destinations
 */
- (void)venue:(LLVenue *)venue updatePath:(LLNavigationPath *)navigationPath from:(LLPosition *)startPosition to:(LLPosition *)endPosition;

/**
 *  The result of a timeEstimate call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param timeEstimate     the time to traverse from the start to the end position
 */
- (void)venue:(LLVenue *)venue timeEstimate:(NSNumber *)timeEstimate from:(LLPosition *)startPosition to:(LLPosition *)endPosition;

@end

/**
 * **Deprecated**: use LLVenueDelegate
 */
__attribute__((deprecated("use LLVenueDelegate")))
@protocol LLAirportDelegate <LLVenueDelegate>

@optional

/**
 *  Returns the list of buildings generated by a call to LLVenue listBuildings
 *
 *  @param venue     the object which generated this list
 *  @param buildings an array of LLBuildingInfo objects
 *
 * **Deprecated**: use LLVenueDelegate
 */
- (void)airport:(LLVenue *)venue buildingList:(NSArray *)buildings __attribute__((deprecated("use LLVenueDelegate")));

/**
 *  A new instance of a LLBuilding object as loaded via the LLVenue loadBuilding: method.
 *
 *  @param venue    the object which loaded the building
 *  @param building the newly created LLBuilding object
 *
 * **Deprecated**: use LLVenueDelegate
 */
- (void)airport:(LLVenue *)venue buildingLoaded:(LLBuilding *)building __attribute__((deprecated("use LLVenueDelegate")));

/**
 *  The result of a navigation call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param navigationPath	the resulting navigation path
 *  @param startPosition 	the start position of the navigation
 *  @param destinations		the array of LLPosition destinations
 *
 * **Deprecated**: use LLVenueDelegate
 */
- (void)airport:(LLVenue *)venue navigationPath:(LLNavigationPath *)navigationPath from:(LLPosition *)startPosition toDestinations:(NSArray *)destinations __attribute__((deprecated("use LLVenueDelegate")));

/**
 *  The result of a update navigation path call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param navigationPath	the resulting navigation path
 *  @param startPosition 	the start position of the navigation
 *  @param destinations		the array of LLPosition destinations
 *
 * **Deprecated**: use LLVenueDelegate
 */
- (void)airport:(LLVenue *)venue updatePath:(LLNavigationPath *)navigationPath from:(LLPosition *)startPosition to:(LLPosition *)endPosition __attribute__((deprecated("use LLVenueDelegate")));

/**
 *  The result of a timeEstimate call.
 *
 *  @param venue  			the object which performed the navigation
 *  @param timeEstimate     the time to traverse from the start to the end position
 *
 * **Deprecated**: use LLVenueDelegate
 */
- (void)airport:(LLVenue *)venue timeEstimate:(NSNumber *)timeEstimate from:(LLPosition *)startPosition to:(LLPosition *)endPosition __attribute__((deprecated("use LLVenueDelegate")));

@end

/**
 *  The LLVenue class provides the ability to navigate and search a venue as well as providing access to the buildings found within the venue.
 *  Instances of this class should never be created directly.  They must be generated via the loadVenue: method of LLVenueDatabase.
 *
 *  Please note that for backward compatibility reasons this class can still be referenced as LLAirport, but the
 *  **LLAirport is deprecated** and will be removed in future releases.
 */
@interface LLVenue : LLLocation

/**
 *  Delegate to handle the results of the asynchronous calls on this object
 */
@property (weak, nonatomic) id <LLVenueDelegate> delegate;

/**
 * Contains the id of the default building for this venue
 */
@property (nonatomic, readonly) NSString *defaultBuildingId;


/**
 * Returns the ordinal associated with the given floorId.
 *
 * **Deprecated**: use LLMap getOrdinalForFloorId: instead""
 */
- (NSNumber *)getOrdinalForFloorId:(NSString *)floorId __attribute__((deprecated("use LLMap getOrdinalForFloorId: instead")));;

/**
 * Returns true or false. True if the provided latLng is in the venue.
 */
- (NSNumber *)isLatLngInVenue:(LLLatLng *)latLng;

/**
 *  The IATA or ICAO code for this airport
 *
 *  @return the airport code
 */
@property (nonatomic, readonly) NSString *airportCode;

/**
 *  The venue identifier for this venue
 *
 *  @return the venue id
 */
@property (nonatomic, readonly) NSString *venueId;


/**
 * The beacon regions for this venue.
 */
@property (nonatomic, readonly) NSArray *beaconRegions;

@property (nonatomic, readonly) LLPosition *position;

@property (nonatomic, readonly) NSString *positionState;

@property (nonatomic, readonly) LLBeacon *closestBeacon;

@property (nonatomic, readonly) NSString *assetVersion;

@property (nonatomic, readonly) NSString *version;

@property (nonatomic, readonly) NSArray *positioningSupported;

@property (nonatomic, readonly) NSArray *grabPoiIds;

@property (nonatomic, readonly) NSNumber *hasVouchers;

@property (nonatomic, readonly) NSString *uber;

@property (nonatomic, readonly) BOOL supportsStepwiseDirections;

/*
* Should we be using positioning sensors for location?
*
* (A PositionSensor sends periodic information about position that includes a LatLng and errorRadius)
*/
typedef enum LLPositioningSensorAlgorithm {
    LLPositioningSensorAlgorithmInternal = 0, // default: use our own positioning
    LLPositioningSensorAlgorithmHybrid,       // combine our own positioning with a third party's positioning
    LLPositioningSensorAlgorithmExternal      // use a third party's positioning instead of our own
} LLPositioningSensorAlgorithm;

@property (nonatomic) LLPositioningSensorAlgorithm positioningSensorAlgorithm;

@property (nonatomic) double beaconReadingLifespan;
@property (nonatomic) double bonusForBeingNearest;
@property (nonatomic) NSInteger minimumReadingCount;
@property (nonatomic, readonly) NSArray *positionManagerRollingCarpetRegionAlgorithmParameters;

/**
 *  Loads the navigation graph used to compute navigation paths.
 */
- (void)loadNavigationGraph;

/**
 *  Retrieve the list of buildings that make up this venue. The result is passed back via the venue:buildingList: method of the delegate.
 *
 * **Deprecated return type**: In the future this method will have a <code>void</code> return type and will only provide the list of buildings via the delegate <code>venue:buildingList:</code> method
 */
- (NSArray *)listBuildings;

/**
 *  Load a specific building.  This method loads the data about the building and creates a new instance of LLBuilding which is returned via the delegate method.
 *
 * **Deprecated return type:** In the future this method will have a <code>void</code> return type and will only provide the building via the delegate <code>venue:buildingLoaded:</code> method
 *
 *  @param buildingId identifies the building to load
 */
- (LLBuilding *)loadBuilding:(NSString *)buildingId;

/**
 * **Deprecated:**: use <code>loadBuilding:</code> instead
 */
- (LLBuilding *)loadBuildingSync:(NSString *)buildingId __attribute__((deprecated("use loadBuilding: instead")));

/**
 *  Calculate a navigation path from the start position to the end postion.
 *
 *  @param startPosition the starting point of the navigation
 *  @param endPosition   the end point of the navigation
 */
- (void)navigateFrom:(LLPosition *)startPosition to:(LLPosition *)endPosition;

/**
 *  Update the navigation path from the start position to the end postion.
 *
 *  @param startPosition the starting point of the navigation
 *  @param endPosition   the end point of the navigation
 */
- (void)updatePathFrom:(LLPosition *)startPosition to:(LLPosition *)endPosition;

/**
 *  Generate a navigation path from a start point to one or more destinations.
 *
 *  @param startPosition the starting point of the navigation
 *  @param destinations  a destination array of LLPosition instances
 */
- (void)navigateFrom:(LLPosition *)startPosition toDestinations:(NSArray *)destinations;

/**
 *  Calculate the time to travel from the start position to the end postion.
 *
 *  @param startPosition the starting point
 *  @param endPosition   the end point
 *
 * **Deprecated**: use the timeEstimateFrom:to:completion: instead"
 */
- (void)timeEstimateFrom:(LLPosition *)startPosition to:(LLPosition *)endPosition __attribute__((deprecated("use the timeEstimateFrom:to:completion: instead")));

/**
 *  Calculate the time to travel from the start position to the end postion.
 *
 *  @param startPosition the starting point
 *  @param endPosition   the end point
 *  @param completion    the completion callback that will receive the result
 */
- (void)timeEstimateFrom:(LLPosition *)startPosition to:(LLPosition *)endPosition completion:(void (^ __nonnull)(NSNumber *))completion;

/**
 *  Creates a search object for quering the database within this search context.
 *
 *  @param query the query string
 *
 *  @return the LLSearch object
 */
- (LLSearch *)search;

/**
 *  Returns a new LLPOIDatabase for retrieving information about POIs found in this venue.
 *
 *  @return the POI database
 */
- (LLPOIDatabase *)poiDatabase;

@property (nonatomic, readonly) NSArray<NSString *> *searchSuggestions;

- (void)processBeaconReadings:(NSArray *)beacons;

- (void)recordPositionSensorReading:(LLLatLng *)latLng errorRadius:(float)errorRadius floorId:(NSString *)floorId;

- (void)recordPositionSensorReading:(LLLatLng *)latLng errorRadius:(float)errorRadius floorId:(NSString *)floorId heading:(NSNumber *)heading;

- (void)recordPositionSensorServiceInterruption:(NSString *)description;

- (void)recordHeadingSensorReading:(NSNumber *)heading;

- (void)clearPosition;

@end
